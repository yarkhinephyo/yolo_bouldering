app: yolo-bouldering

service: yolo-bouldering-route

provider:
  name: aws
  runtime: nodejs16.x
  stage: dev
  region: ap-southeast-1
  memorySize: 1024
  apiGateway:
    # Required for binary media such as images to work with api gateway
    binaryMediaTypes:
      - 'multipart/form-data'
  environment:
    NODE_ENV: ${self:custom.stage}
    ALLOWED_ORIGIN: ${self:custom._origin.${self:custom.stage}}
    S3_BUCKET_NAME: ${self:custom.s3BucketName}
    ROUTE_TABLE_NAME: ${self:custom.routeTableName}
    GYM_TABLE_NAME: ${self:custom.gymTableName}
    TELEGRAM_SNS_ARN: ${self:custom.telegramSNSArn}
    COGNITO_USERPOOL_ID: ${self:custom.cognitoUserpoolId}
  logRetentionInDays: 14
  lambdaHashingVersion: 20201221
  iam:
    role:
      statements:
        - Effect: Allow
          Action:
            - s3:PutObject
            - s3:DeleteObject
          Resource:
            - '${self:custom.s3BucketArn}/*'
        - Effect: Allow
          Action:
            - dynamodb:GetItem
            - dynamodb:PutItem
            - dynamodb:DeleteItem
            - dynamodb:UpdateItem
            - dynamodb:Query
            - dynamodb:Scan
          Resource:
            - '${self:custom.routeTableArn}'
            - '${self:custom.routeTableArn}/index/*'
            - '${self:custom.gymTableArn}'
            - '${self:custom.gymTableArn}/index/*'
        - Effect: Allow
          Action:
            - sns:publish
          Resource:
            - '${self:custom.telegramSNSArn}'
        - Effect: Allow
          Action:
            - cognito-idp:AdminGetUser
          Resource: ${self:custom.cognitoArn}

plugins:
  - serverless-plugin-typescript
  - serverless-api-gateway-throttling
  - serverless-newrelic-lambda-layers # Integrates NewRelic logging

functions:
  getGymsByCountry:
    handler: src/getGymsByCountry.handler
    events:
      - http:
          path: v1/route/gym/country
          method: get
          cors:
            origin: ${self:custom._origin.${self:custom.stage}}

  createRoute:
    handler: src/createRoute.handler
    events:
      - http:
          path: v1/route/new
          method: post
          cors:
            origin: ${self:custom._origin.${self:custom.stage}}
          authorizer:
            arn: ${self:custom.cognitoArn}
            scopes:
              - aws.cognito.signin.user.admin

  getRoutesByGym:
    handler: src/getRoutesByGym.handler
    events:
      - http:
          path: v1/route/all
          method: get
          cors:
            origin: ${self:custom._origin.${self:custom.stage}}

  getRoutesByUser:
    handler: src/getRoutesByUser.handler
    events:
      - http:
          path: v1/route/user
          method: get
          cors:
            origin: ${self:custom._origin.${self:custom.stage}}

  getRouteDetails:
    handler: src/getRouteDetails.handler
    events:
      - http:
          path: v1/route/details
          method: post
          cors:
            origin: ${self:custom._origin.${self:custom.stage}}

  toggleUpvoteRoute:
    handler: src/toggleUpvoteRoute.handler
    events:
      - http:
          path: v1/route/details/toggleUpvote
          method: post
          cors:
            origin: ${self:custom._origin.${self:custom.stage}}
          authorizer:
            arn: ${self:custom.cognitoArn}
            scopes:
              - aws.cognito.signin.user.admin

  reportRoute:
    handler: src/reportRoute.handler
    events:
      - http:
          path: v1/route/details/report
          method: post
          cors:
            origin: ${self:custom._origin.${self:custom.stage}}
          authorizer:
            arn: ${self:custom.cognitoArn}
            scopes:
              - aws.cognito.signin.user.admin

  gradeRoute:
    handler: src/gradeRoute.handler
    events:
      - http:
          path: v1/route/details/grade
          method: post
          cors:
            origin: ${self:custom._origin.${self:custom.stage}}
          authorizer:
            arn: ${self:custom.cognitoArn}
            scopes:
              - aws.cognito.signin.user.admin

  deleteRoute:
    handler: src/deleteRoute.handler
    events:
      - http:
          path: v1/route
          method: delete
          cors:
            origin: ${self:custom._origin.${self:custom.stage}}
          authorizer:
            arn: ${self:custom.cognitoArn}
            scopes:
              - aws.cognito.signin.user.admin

  addComment:
    handler: src/addComment.handler
    events:
      - http:
          path: v1/route/details/comment
          method: post
          cors:
            origin: ${self:custom._origin.${self:custom.stage}}
          authorizer:
            arn: ${self:custom.cognitoArn}
            scopes:
              - aws.cognito.signin.user.admin

  deleteComment:
    handler: src/deleteComment.handler
    events:
      - http:
          path: v1/route/details/comment
          method: delete
          cors:
            origin: ${self:custom._origin.${self:custom.stage}}
          authorizer:
            arn: ${self:custom.cognitoArn}
            scopes:
              - aws.cognito.signin.user.admin

  requestGym:
    handler: src/requestGym.handler
    events:
      - http:
          path: v1/route/gym/request
          method: post
          cors:
            origin: ${self:custom._origin.${self:custom.stage}}
          authorizer:
            arn: ${self:custom.cognitoArn}
            scopes:
              - aws.cognito.signin.user.admin

  # Listens to the SNS event of user deletion
  # Not a HTTP endpoint
  deleteUserDispatcher:
    handler: src/deleteUserDispatcher.handler
    events:
      - sns:
          arn: ${self:custom.deleteUserSNSArn}

custom:
  stage: ${opt:stage, self:provider.stage}

  # Required for authorizing accessTokens from Cognito
  cognitoArn: ${ssm:/${self:custom.stage}/cognito/arn}

  # Required for retrieving user details from Cognito
  cognitoUserpoolId: ${ssm:/${self:custom.stage}/cognito/poolId}

  # Required for storing pictures of routes
  s3BucketArn: ${ssm:/${self:custom.stage}/s3/assets/arn}
  s3BucketName: ${ssm:/${self:custom.stage}/s3/assets/name}

  routeTableArn: ${ssm:/${self:custom.stage}/dynamodb/route/arn}
  routeTableName: ${ssm:/${self:custom.stage}/dynamodb/route/name}
  gymTableArn: ${ssm:/${self:custom.stage}/dynamodb/gym/arn}
  gymTableName: ${ssm:/${self:custom.stage}/dynamodb/gym/name}

  # Required for notifying the administrators via telegram
  telegramSNSArn: ${ssm:/${self:custom.stage}/sns/telegram/arn}

  # Required for listening to deleteUser events by user microservice
  deleteUserSNSArn: ${ssm:/${self:custom.stage}/sns/deleteUser/arn}

  # Read CONTRIBUTING.md for the configuration format
  # The microservice can still function without this plugin
  newRelic:
    accountId: ${file(./serverless-config.${self:custom.stage}.json):NEW_RELIC_ACCOUNT_ID, ''}
    apiKey: ${file(./serverless-config.${self:custom.stage}.json):NEW_RELIC_API_KEY, ''}
    enableExtension: true
    enableIntegration: true
    logEnabled: true
    enableFunctionLogs: true
    cloudWatchFilter: '*'

  apiGatewayThrottling:
    maxRequestsPerSecond: ${self:custom._maxRequestsPerSecond.${self:custom.stage}}
    maxConcurrentRequests: ${self:custom._maxConcurrentRequests.${self:custom.stage}}
  _maxRequestsPerSecond:
    dev: 1
    prod: 5
  _maxConcurrentRequests:
    dev: 1
    prod: 5
  _origin:
    dev: '*'
    prod: '*'
